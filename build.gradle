import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.91'
    id 'org.jetbrains.kotlin.jvm' version '2.1.21'
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

def ENV = System.getenv()
def isLocal = !ENV.containsKey("GITHUB_RUN_NUMBER")

def archiveName = "${mod_id.replace("_", "-")}-${minecraft_version}"

version = "${mod_version}-${isLocal ? "local.${Instant.now().epochSecond}" : "build.${ENV.GITHUB_RUN_NUMBER}"}"
group = project.mod_group_id
base.archivesName = archiveName

println("Building version: ${version}")

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
compileKotlin.compilerOptions.jvmTarget = JvmTarget.JVM_21

neoForge {
    version = neo_version

    validateAccessTransformers = true

    accessTransformers {
        publish(project.file('src/main/resources/META-INF/accesstransformer.cfg'))
    }

    runs {
        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            logLevel = org.slf4j.event.Level.DEBUG
        }

        "Client-One" {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id

            if (ENV.MC_CLIENT_ARGS) {
                programArguments.addAll(ENV.MC_CLIENT_ARGS.split(' '))
            }

            gameDirectory = file 'runs/client'
        }

        "Client-Two" {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id

            gameDirectory = file 'runs/client'

            if (ENV.MC_CLIENT_2_ARGS) {
                programArguments.addAll(ENV.MC_CLIENT_2_ARGS.split(' '))
            }
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id

            gameDirectory = file 'runs/server'
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()

            gameDirectory = file 'runs/client'
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    mavenLocal()

    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }

}

dependencies {
    implementation "thedarkcolour:kotlinforforge-neoforge:${kff_version}"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
            curios_version_range   : curios_version_range,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

publishing {
    publications {
        mavenNeoForge(MavenPublication) {
            artifactId = archiveName
            from components.java
        }
    }

    repositories {
        if (ENV.MAVEN_URL && ENV.MAVEN_USERNAME && ENV.MAVEN_TOKEN) {
            maven {
                url = ENV.MAVEN_URL
                credentials {
                    username = ENV.MAVEN_USERNAME
                    password = ENV.MAVEN_TOKEN
                }
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

unifiedPublishing {
    project {
        displayName = "Patchouli DataGen ${project.minecraft_version} ${project.version}"
        releaseType = "beta"
        gameVersions = [project.minecraft_version]
        gameLoaders = ["neoforge"]

        changelog = "https://github.com/Berry-Club/PatchouliDataGen/blob/master/CHANGELOG.md#" + project.mod_version.toString().replace(".", "")

        mainPublication jar

        relations {

            depends {
                curseforge = modrinth = "kotlin-for-forge"
            }

            depends {
                curseforge = modrinth = "curios"
            }

            optional {
                curseforge = modrinth = "modonomicon"
            }
        }

        if (ENV.CURSEFORGE_KEY) {
            curseforge {
                token = ENV.CURSEFORGE_KEY
                id = project.curseforge_id
            }
        }

        if (ENV.MODRINTH_TOKEN) {
            modrinth {
                token = ENV.MODRINTH_TOKEN
                id = project.modrinth_id
            }
        }

    }
}